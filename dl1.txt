# %%
import numpy as np
import tensorflow as tf
from tensorflow import keras
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

# %%
data_url = "http://lib.stat.cmu.edu/datasets/boston"
df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
data = np.hstack([df.values[::2, :], df.values[1::2, :2]])
target = df.values[1::2, 2]

# %%
df.head()

# %%
# Load dataset
X, y = data, target

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Scale features
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


# %%
# Building the model
model = Sequential()
# The Input Layer :
model.add(Dense(128, kernel_initializer='normal', input_dim = X_train.shape [1], activation='relu'))
# The Hidden Layers:
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
model.add(Dense(256, kernel_initializer='normal',activation='relu'))
# The Output Layer:
model.add (Dense(1, kernel_initializer='normal',activation='linear'))


# %%
# Compiling the model
model.compile(optimizer='adam', loss='mean_squared_error')
model.summary()


# %%
# Training the model
model.fit(X_train_scaled, y_train, epochs=100, batch_size=32, verbose=1)

# %%

# Evaluating the model
mse = model.evaluate(X_test_scaled, y_test, verbose=0)
print("Mean Squared Error on Test Data:", mse)

# %%



